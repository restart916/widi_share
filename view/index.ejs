<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>WIDI SHARE</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link rel='stylesheet' type='text/css' media='screen' href='style/main.css'>
    <!-- <script src='main.js'></script> -->

    <!-- 개발버전, 도움되는 콘솔 경고를 포함. -->
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <!-- 상용버전, 속도와 용량이 최적화됨. -->
    <!-- <script src="https://cdn.jsdelivr.net/npm/vue"></script> -->
</head>
<body>
    <div id="app">
        <div id='productName'>
            Widi Share
        </div>
        <div id='inputText'>
            <p>링크를 적어주세요</p>
            <input 
                type="text" 
                id="twitterLink" 
                v-model="twitterLink" 
                placeholder="http://"
                @keyup="generateImage"
                class="inputLink">
            </input>
        </div>

        <div id='error'>
            <p>{{ errorMessage }}</p>
        </div>

        <div id='result'>
            <!-- <p>결과</p> -->
            <img v-if="imageData != ''" :src="imageData">
        </div>

        <div id='selectImage' class="container">
            <div v-for="image in imageList" class="item" >
                <!-- <input type="radio" :id="image" :value="image" v-model="selectImage" @change="generateImage"> -->
                <!-- <label :for="image"> -->
                <div @click="onclickImage(image)">
                    <img :src="'./image/' + image + '.png'" :class="checkSelected(image)"/>
                </div>
                <!-- </label> -->
            </div>
        </div>

        <div class="divied"></div>

        <div id='selectFont' class="container">
            <div v-for="font in fontList" class="item">
                <!-- <input type="radio" :id="font.family" :value="font.family" v-model="selectFont" @change="generateImage"> -->
                <!-- <label :for="font.family"> -->
                <div class="fontButton" @click="onclickFont(font.family)" :class="checkSelectedFont(font.family)">
                    {{ font.name }}
                </div>
                <!-- </label> -->
            </div>
        </div>

        <div class="divied"></div>

        <div id='selectColor' class="container">
            <div class="item">
                <div class="colorButtonWhite" @click="onclickColor('#FFFFFF')">
                    글자색
                </div>

            </div>
                
            <div class="item">
                <div class="colorButtonBlack" @click="onclickColor('#1C1C1E')">
                    글자색
                </div>
            </div>
        </div>

        <div class="divied-bottom"></div>
        <!-- <div id='inputText'>
            <p>공유하고 싶은 문자열</p>
            <textarea id="shareText" v-model="shareText"></textarea>
        </div>

        <button @change="generateImage">이미지 생성하기</button> -->

        <nav class="mobile-bottom-nav">
            <div class="mobile-bottom-nav__item" @click="shareImage">
                공유하기
            </div>
        </nav>

        <!-- <div id='share'>
            <p @click="shareImage">공유하기</p>
        </div> -->
    </div>
</body>
</html>

<script>
    let fontList = [
        {
            "name": "리디바탕",
            "family": "RIDIBatang"
        }, 
        {
            "name": "Kopub 바탕체",
            "family": "KopubBatang"
        }, 
        {
            "name": "본고딕",
            "family": "NotoSans"
        }
    ]

    let imageList = Array.from(Array(8).keys()).map((v) => `bg_0${v}`)
    
    let app = new Vue({
        el: '#app',
        data: {
            shareText: '',
            imageData: '',
            twitterLink: 'https://twitter.com/FlatcherLynd/status/1396705389744254976?s=20',
            selectImage: imageList[0],
            selectFont: fontList[0]['family'],
            selectColor: '#FFFFFF',

            errorMessage: '',
            fontList,
            imageList,
            mounted: false,
        },
        mounted: function () {
            this.mounted = true;
        },
        methods: {
            generateImage: async () => {
                let vueData = app.$data
                console.log('generateImage',  vueData.twitterLink)

                vueData.errorMessage = '로딩중입니다'

                try {
                    const url = new URL(vueData.twitterLink)
                    const paths = url.pathname.split('/')

                    const twitterId = paths[paths.length-1]

                    console.log('twitterId',  twitterId)

                    const response = await fetch('/api/generate/tweet', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json;charset=utf-8'
                        },
                        body: JSON.stringify({
                            tweet: twitterId,
                            image: vueData.selectImage,
                            font: vueData.selectFont,
                            color: vueData.selectColor,
                        })
                    });
                    
                    const data = await response.json()
                    vueData.imageData = data.image

                    vueData.errorMessage = ''
                } catch (error) {
                    console.log('generateImage error', error)

                    vueData.errorMessage = '이미지 생성중에 에러가 발생했습니다.'
                }
            },
            checkSelected: function (image) {
                return image == this.selectImage ? 'selected' : 'no-selected'
            },
            checkSelectedFont: function (font) {
                return font == this.selectFont ? 'selected-font' : ''
            },
            onclickImage: async(image) => {
                let vueData = app.$data
                console.log('onclickImage', image)    

                vueData.selectImage = image
                await app.generateImage()
            },
            onclickFont: async function (family) {
                this.selectFont = family;
                await this.generateImage()
            },
            onclickColor: async function (color) {
                this.selectColor = color;
                await this.generateImage()
            },
            // generateImage: async (event) => {
            //     let vueData = app.$data
            //     console.log('generateImage', vueData)

            //     const response = await fetch('/api/generate', {
            //         method: 'POST',
            //         headers: {
            //             'Content-Type': 'application/json;charset=utf-8'
            //         },
            //         body: JSON.stringify({
            //             text: vueData.shareText,
            //             image: vueData.selectImage,
            //         })
            //     });

            //     const data = await response.json()

            //     // console.log('generateImage', vueData.imageData)
            //     vueData.imageData = data.image
            //     // console.log('generateImage', vueData.imageData)
            // },
            shareImage: async () => {
                let vueData = app.$data
                console.log('shareImage')

                // window.location.href=vueData.imageData.replace("image/png", "image/octet-stream");

                let link = document.createElement("a")
                // var link = document.getElementById('link');
                link.setAttribute('download', 'widi-share.png');
                link.setAttribute('href', vueData.imageData.replace("image/png", "image/octet-stream"));
                document.body.appendChild(link);
                link.click();
                
                // const base64url = vueData.imageData.replace("image/png", "image/octet-stream")
                // const blob = await (await fetch(base64url)).blob();
                // const file = new File([blob], 'fileName.png', { type: blob.type });
                
                // const data = {
                //     files: [file],
                //     title: 'Widi Share',
                // }

                // if (navigator.canShare && navigator.canShare(data)) {
                //     await navigator.share(data)
                //     alert('공유 성공')
                // } else {
                //     alert('공유 실패')
                // }
            }
        }
    })
</script>
