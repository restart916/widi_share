<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>WIDI SHARE</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <!-- <script src='main.js'></script> -->
    <meta property="og:title" content="위디" />
    <meta property="og:description" content="WIDI SHARE 명언 박제. 비공개 계정 트윗은 박제가 어려워요" />
    <meta name="description" content="WIDI SHARE 명언 박제. 비공개 계정 트윗은 박제가 어려워요" />
    <meta property="og:url" content="https://secure-dusk-50656.herokuapp.com/" />
    <meta property="og:image" content="" />

    <link rel="apple-touch-icon" sizes="57x57" href="./image/favicon/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="./image/favicon/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="./image/favicon/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="./image/favicon/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="./image/favicon/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="./image/favicon/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="./image/favicon/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="./image/favicon/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="./image/favicon/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192"  href="./image/favicon/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="./image/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="./image/favicon/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="./image/favicon/favicon-16x16.png">
    <link rel="manifest" href="./image/favicon/manifest.json">

    <!-- 개발버전, 도움되는 콘솔 경고를 포함. -->
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <!-- 상용버전, 속도와 용량이 최적화됨. -->
    <!-- <script src="https://cdn.jsdelivr.net/npm/vue"></script> -->
    
    <script src="https://cdn.jsdelivr.net/npm/fabric@4.5.0/dist/fabric.min.js"></script>
    <script data-ad-client="ca-pub-1514313371293640" async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

    <link rel='stylesheet' type='text/css' media='screen' href='style/main.css'>
</head>
<body>
    <!-- The core Firebase JS SDK is always required and must be listed first -->
    <script src="https://www.gstatic.com/firebasejs/8.7.1/firebase-app.js"></script>

    <!-- TODO: Add SDKs for Firebase products that you want to use
        https://firebase.google.com/docs/web/setup#available-libraries -->
    <script src="https://www.gstatic.com/firebasejs/8.7.1/firebase-analytics.js"></script>

    <script>
    // Your web app's Firebase configuration
    // For Firebase JS SDK v7.20.0 and later, measurementId is optional
    let firebaseConfig = {
        apiKey: "AIzaSyD_F_ESTDyLHvTOv1QrzUbiy6Gt0sQCS4k",
        authDomain: "widi-share.firebaseapp.com",
        projectId: "widi-share",
        storageBucket: "widi-share.appspot.com",
        messagingSenderId: "1051941909584",
        appId: "1:1051941909584:web:e1bb94be2b95f2465b8d55",
        measurementId: "G-MNCR6GZVDZ"
    };
    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
    const analytics = firebase.analytics();
    </script>
    <div id="app">
        <div class="header">
            <div id='productName'>
                <img src="./image/header.svg" @click="moveHome">
            </div>
            <div id='nav-menu'>
                <ul class="nav">
                    <li class="nav-item">
                      <a class="nav-link" :class="checkTab(0)" @click="changeTab(0)" href="#">트윗 링크 입력</a>
                    </li>
                    <li class="nav-item">
                      <a class="nav-link" :class="checkTab(1)" @click="changeTab(1)" href="#">직접 입력</a>
                    </li>
                </ul>
            </div>
        </div>
        
        <div class="body-content">
            <div id='inputText' v-if="currentTab == 0">
                <p>트윗 링크를 넣으면 이미지가 생겨요</p>
                <input 
                    type="text" 
                    id="twitterLink" 
                    v-model="twitterLink" 
                    placeholder="http://"
                    @keyup="generateImage"
                    @change="generateImage"
                    @input="generateImage"
                    @paste="generateImageFromPaste"
                    class="inputLink">
                </input>
            </div>
            <div id='detailInput' v-else>
                <textarea 
                    type="text" 
                    v-model="tweetText" 
                    placeholder="내용을 넣어주세요"
                    style="resize: none; height: 200px; margin-bottom: 12px;"
                    @keyup="render"
                    @change="render"
                    @input="render"
                    @paste="render"
                    class="inputTweetName">
                </textarea>
                <input 
                    type="text" 
                    v-model="tweetName" 
                    placeholder="제목"
                    @keyup="render"
                    @change="render"
                    @input="render"
                    @paste="render"
                    class="inputTweetName">
                </input>
                <input 
                    type="text" 
                    v-model="tweetUsername" 
                    placeholder="글쓴이"
                    @keyup="render"
                    @change="render"
                    @input="render"
                    @paste="render"
                    class="inputTweetName">
                </input>
            </div>
    
            <div id='error'>
                <p>{{ errorMessage }}</p>
            </div>
    
            <div id='loading'>
                <p>{{ loadingMessage }}</p>
            </div>
    
            <div id='saveGuide'>
                <p v-html="resultMessage"></p>
            </div>
    
            <div id='result'>
                <img v-if="imageData != ''" :src="imageData">
            </div>
    
            <!-- <div id='result2'>
                <a :href="imageData" download="image.png" id="embedImage">Download</a>            
            </div> -->
    
            <div id='selectImage' class="container ps-0 pe-0">
                <div v-for="image in imageList" class="item">
                    <!-- <input type="radio" :id="image" :value="image" v-model="selectImage" @change="generateImage"> -->
                    <!-- <label :for="image"> -->
                    <div @click="onclickImage(image)">
                        <img :id="image" :src="'./image/' + image + '.png'" :class="checkSelected(image)"/>
                    </div>
                    <!-- </label> -->
                </div>
            </div>
    
            <div class="divied"></div>
    
            <div id='selectFont' class="container ps-0 pe-0">
                <div v-for="font in fontList" class="item-button">
                    <!-- <input type="radio" :id="font.family" :value="font.family" v-model="selectFont" @change="generateImage"> -->
                    <!-- <label :for="font.family"> -->
                    <div class="fontButton" @click="onclickFont(font.family)" :class="checkSelectedFont(font.family)">
                        {{ font.name }}
                    </div>
                    <!-- </label> -->
                </div>
            </div>
    
            <div class="divied"></div>
    
            <div id='selectColor' class="container ps-0 pe-0">
                <div class="item-button" style="margin-right: 8px;">
                    <div class="colorButtonWhite" @click="onclickColor('#FFFFFF')">
                        하얀색 글씨
                    </div>
                </div>
                <div class="item-button">
                    <div class="colorButtonBlack" @click="onclickColor('#1C1C1E')">
                        검정색 글씨
                    </div>
                </div>
            </div>
    
        </div>

        <ins class="kakao_ad_area" style="display:none;" 
            data-ad-unit    = "DAN-sprUUbzsH1FNCx00" 
            data-ad-width   = "320" 
            data-ad-height  = "50"></ins> 

        <div id="credit">
            <div class="credit-text">
                서비스
            </div>
            <div class="credit-link">
                <a href="https://twitter.com/widishare2021" class="credit" target="_blank">버그 신고 및 제휴 문의</a>
            </div>
            <div style="margin-bottom: 16px;">
            </div>
            <div class="credit-text">
                만든 사람
            </div>
            <div class="credit-link">
                <a href="https://twitter.com/FlatcherLynd" class="credit" target="_blank">윌리 👀</a>
            </div>
            <div class="credit-link">
                <a href="https://twitter.com/Hyunjinraykkom" class="credit" target="_blank">모리 🐭</a>
            </div>            
        </div>

        <div style="display: none;">
            <canvas id="canvas" ></canvas>
            <img id="logo" src="./image/logo.png"/>
        </div>
    </div>
</body>
</html>

<script>
    let fontList = [
        {
            "name": "리디바탕",
            "family": "RIDIBatang"
        }, 
        {
            "name": "Kopub 바탕체",
            "family": "KopubBatang"
        }, 
        {
            "name": "본고딕",
            "family": "NotoSans"
        }, 
        {
            "name": "Pretendard",
            "family": "Pretendard"
        }
    ]

    let imageList = [
        "bg_10", 
        "bg_9", 
        "bg_11", 
        "bg_12",
        "bg_0", 
        "bg_1", 
        "bg_2", 
        "bg_3", 
        "bg_4", 
        "bg_5", 
        "bg_6", 
        "bg_7", 
        // "bg_8", 
    ]
    
    let app = new Vue({
        el: '#app',
        data: {
            shareText: '',
            imageData: '',
            twitterLink: '',
            selectImage: imageList[0],
            selectFont: fontList[0]['family'],
            selectColor: '#FFFFFF',
            currentTab: 0,

            tweetText: '',
            tweetName: '',
            tweetUsername: '',

            canvas: null,
            
            errorMessage: '',
            loadingMessage: '',
            resultMessage: '',
            fontList,
            imageList,
            mounted: false,            
        },
        mounted: function () {
            this.mounted = true;
            fabric.Object.prototype.objectCaching = true;

            navigator.clipboard.readText()
            .then(text => {
                if (text.length < 5) {
                    return
                }

                try {
                    const url = new URL(text)
                    this.twitterLink = text
                    this.generateImage()
                } catch (error) {
                    this.tweetText = text
                    this.render()
                    // console.log('mounted clipboard readText URL err', error)    
                }

            })
            .catch(err => {
                console.log('mounted clipboard readText err', err)
            });
        },
        methods: {
            render: function() {
                const threshold = 100

                clearTimeout(this.timeout)
                this.timeout = setTimeout(() => {
                    this.timeout = null
                    this.redraw()
                }, threshold)
            },

            redraw: function () {
                this.errorMessage = ''
                if (this.tweetText == '') {
                    this.errorMessage = '트윗 링크를 넣어주세요'
                    return
                } 
                
                // 600 * 0.6 = 360
                // console.log(window.screen.width)
                // const imageSize = Math.min(window.screen.width-32, 600);
                const imageSize = 360;
                const margin = 20 ;

                if (this.canvas == null) {
                    
                } else {
                    this.canvas.dispose()
                }
                
                this.canvas = new fabric.Canvas('canvas', {
                    isDrawingMode: false,
                    width: imageSize,
                    height: imageSize,
                    allowTouchScrolling: false,
                });
                
                let imgElement = document.getElementById(this.selectImage);
                let imgInstance = new fabric.Image(imgElement, {
                    left: 0,
                    top: 0,
                    right: 1200,
                    bottom: 1200,
                    scaleX: imageSize / 1200,
                    scaleY: imageSize / 1200,
                    opacity: 1,
                    selectable: false,
                });
                this.canvas.add(imgInstance);

                let text = new fabric.Textbox(this.tweetText, { 
                    left: margin,
                    width: imageSize - (margin * 2) - 8,
                    fontSize: 15, 
                    fontFamily: this.selectFont,
                    lineHeight: 1.5,
                    selectable: false,
                    fill: this.selectColor,
                    textAlign: 'left',
                    charSpacing: 100,
                    splitByGrapheme: true,
                });

                // console.log('height', text.height);
                text.top = (imageSize - (text.height + 54)) / 2
                this.canvas.add(text);

                let nameText = new fabric.Text(this.tweetName, { 
                    left: margin,
                    width: imageSize - (margin * 2),
                    fontSize: 14, 
                    fontFamily: 'NotoSans',
                    top: (text.top + text.height + 16),
                    selectable: false,
                    fill: this.selectColor,
                });
                this.canvas.add(nameText);

                if (this.tweetUsername) {
                    let usernameText = new fabric.Text(`${this.tweetUsername}`, { 
                        left: margin,
                        width: imageSize - (margin * 2),
                        fontSize: 14, 
                        fontFamily: 'NotoSansThin',
                        top: (text.top + text.height + 38),
                        selectable: false,
                        fill: `${this.selectColor}B0`,
                    });
                    // console.log('usernameText.height', usernameText.height)
                    this.canvas.add(usernameText);
                }

                const logoScale = 0.3
                let logoElement = document.getElementById('logo');
                let logoInstance = new fabric.Image(logoElement, {
                    left: imageSize - (120 * logoScale) - 10,
                    top: imageSize - (60 * logoScale) - 10,
                    scaleX: logoScale,
                    scaleY: logoScale,
                    opacity: 1,
                    selectable: false,
                });
                this.canvas.add(logoInstance);

                this.imageData = this.canvas.toDataURL({
                    format: 'png',
                    multiplier: 4,
                })
                console.log('finished render')
            },
            generateImageFromPaste: async (event) => {
                // console.log('generateImageFromPaste', event)
                let vueData = app.$data
                vueData.twitterLink = event.target.value
                await app.generateImage();
            },
            generateImage: async () => {
                let vueData = app.$data
                // console.log('generateImage',  vueData.twitterLink)

                vueData.loadingMessage = '이미지가 만들어지는 중이에요'
                vueData.errorMessage = ''
                vueData.resultMessage = ''

                try {
                    const url = new URL(vueData.twitterLink)
                    const paths = url.pathname.split('/')

                    const twitterId = paths[paths.length-1]

                    const response = await fetch('/api/get/tweet', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json;charset=utf-8'
                        },
                        body: JSON.stringify({
                            tweet: twitterId,
                        })
                    });
                
                    const data = await response.json()

                    vueData.tweetText = data.text
                    vueData.tweetName = data.name
                    vueData.tweetUsername = `@${data.username}`

                    app.render();

                    vueData.errorMessage = ''
                    vueData.loadingMessage = ''
                    vueData.resultMessage = '아래 이미지를 꾸욱 눌러 <strong>저장</strong>해 주세요'
                    
                } catch (error) {
                    // console.log('generateImage error', error)

                    vueData.errorMessage = '트윗 링크가 바르지 않거나 비공개 계정 트윗입니다.'
                    vueData.loadingMessage = ''
                    vueData.resultMessage = ''
                }
            },
            checkSelected: function (image) {
                return image == this.selectImage ? 'selected' : 'no-selected'
            },
            checkSelectedFont: function (font) {
                return font == this.selectFont ? 'selected-font' : ''
            },
            onclickImage: async(image) => {
                let vueData = app.$data
                // console.log('onclickImage', image)    

                analytics.logEvent('select_image', {image});
                
                vueData.selectImage = image
                // await app.generateImage()
                app.render()
            },
            onclickFont: async function (family) {
                this.selectFont = family;

                analytics.logEvent('select_font', {family});
                // await this.generateImage()
                this.render()
            },
            onclickColor: async function (color) {
                this.selectColor = color;

                analytics.logEvent('select_color', {color});

                // await this.generateImage()
                this.render()
            },
            // shareImage: async () => {
            //     let vueData = app.$data
            //     console.log('shareImage')

            //     if(navigator.userAgent.match('CriOS')) {
            //         alert("iOS Chrome 경우 이미지를 길게 클릭해서 하단 '이미지 저장'을 클릭해주세요.")
            //         return;
            //     } else {
            //         // safari
            //     }

            //     // window.location.href=vueData.imageData.replace("image/png", "image/octet-stream");

            //     let link = document.createElement("a")
            //     // let link = document.getElementById('link');
            //     link.setAttribute('download', 'widi-share.png');
            //     link.setAttribute('href', vueData.imageData.replace("image/png", "image/octet-stream"));
            //     document.body.appendChild(link);
            //     link.click();
            // },
            checkTab: function (tab) {
                return this.currentTab == tab ? 'active' : ''
            },
            changeTab: function (tab) {
                analytics.logEvent('change_tab', {tab});

                this.currentTab = tab
            },
            moveHome: function () {
                window.location.href="https://secure-dusk-50656.herokuapp.com/";
            },
        }
    })
</script>
<script type="text/javascript" src="//t1.daumcdn.net/kas/static/ba.min.js" async></script>