<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>WIDI SHARE</title>
    <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link rel='stylesheet' type='text/css' media='screen' href='style/main.css'>
    <!-- <script src='main.js'></script> -->
    <meta property="og:title" content="ÏúÑÎîî" />
    <meta property="og:description" content="WIDI SHARE Î™ÖÏñ∏ Î∞ïÏ†ú. ÎπÑÍ≥µÍ∞ú Í≥ÑÏ†ï Ìä∏ÏúóÏùÄ Î∞ïÏ†úÍ∞Ä Ïñ¥Î†§ÏõåÏöî" />
    <meta name="description" content="WIDI SHARE Î™ÖÏñ∏ Î∞ïÏ†ú. ÎπÑÍ≥µÍ∞ú Í≥ÑÏ†ï Ìä∏ÏúóÏùÄ Î∞ïÏ†úÍ∞Ä Ïñ¥Î†§ÏõåÏöî" />
    <meta property="og:url" content="https://secure-dusk-50656.herokuapp.com/" />
    <meta property="og:image" content="" />

    <!-- Í∞úÎ∞úÎ≤ÑÏ†Ñ, ÎèÑÏõÄÎêòÎäî ÏΩòÏÜî Í≤ΩÍ≥†Î•º Ìè¨Ìï®. -->
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <!-- ÏÉÅÏö©Î≤ÑÏ†Ñ, ÏÜçÎèÑÏôÄ Ïö©ÎüâÏù¥ ÏµúÏ†ÅÌôîÎê®. -->
    <!-- <script src="https://cdn.jsdelivr.net/npm/vue"></script> -->
    
    <script src="https://cdn.jsdelivr.net/npm/fabric@4.5.0/dist/fabric.min.js"></script>
    <script data-ad-client="ca-pub-1514313371293640" async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
</head>
<body>
    <!-- The core Firebase JS SDK is always required and must be listed first -->
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-app.js"></script>

    <!-- TODO: Add SDKs for Firebase products that you want to use
        https://firebase.google.com/docs/web/setup#available-libraries -->
    <script src="https://www.gstatic.com/firebasejs/8.6.8/firebase-analytics.js"></script>

    <script>
    // Your web app's Firebase configuration
    // For Firebase JS SDK v7.20.0 and later, measurementId is optional
    var firebaseConfig = {
        apiKey: "AIzaSyD_F_ESTDyLHvTOv1QrzUbiy6Gt0sQCS4k",
        authDomain: "widi-share.firebaseapp.com",
        projectId: "widi-share",
        storageBucket: "widi-share.appspot.com",
        messagingSenderId: "1051941909584",
        appId: "1:1051941909584:web:e1bb94be2b95f2465b8d55",
        measurementId: "G-MNCR6GZVDZ"
    };
    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);
    firebase.analytics();
    </script>
    <div id="app">
        <div id='productName'>
            Widi Share
        </div>
        <div id='inputText'>
            <p>Ìä∏Ïúó ÎßÅÌÅ¨Î•º ÎÑ£ÏúºÎ©¥ Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏÉùÍ≤®Ïöî</p>
            <input 
                type="text" 
                id="twitterLink" 
                v-model="twitterLink" 
                placeholder="http://"
                @keyup="generateImage"
                @change="generateImage"
                @input="generateImage"
                @paste="generateImageFromPaste"
                class="inputLink">
            </input>
        </div>

        <div id='error'>
            <p>{{ errorMessage }}</p>
        </div>

        <div id='loading'>
            <p>{{ loadingMessage }}</p>
        </div>

        <div id='saveGuide'>
            <p v-html="resultMessage"></p>
        </div>

        <div id='result'>
            <img v-if="imageData != ''" :src="imageData">
        </div>

        <!-- <div id='result2'>
            <a :href="imageData" download="image.png" id="embedImage">Download</a>            
        </div> -->

        <div id='selectImage' class="container">
            <div v-for="image in imageList" class="item">
                <!-- <input type="radio" :id="image" :value="image" v-model="selectImage" @change="generateImage"> -->
                <!-- <label :for="image"> -->
                <div @click="onclickImage(image)">
                    <img :id="image" :src="'./image/' + image + '.png'" :class="checkSelected(image)"/>
                </div>
                <!-- </label> -->
            </div>
        </div>

        <div class="divied"></div>

        <div id='selectFont' class="container">
            <div v-for="font in fontList" class="item-button">
                <!-- <input type="radio" :id="font.family" :value="font.family" v-model="selectFont" @change="generateImage"> -->
                <!-- <label :for="font.family"> -->
                <div class="fontButton" @click="onclickFont(font.family)" :class="checkSelectedFont(font.family)">
                    {{ font.name }}
                </div>
                <!-- </label> -->
            </div>
        </div>

        <div class="divied"></div>

        <div id='selectColor' class="container">
            <div class="item-button" style="margin-right: 8px;">
                <div class="colorButtonWhite" @click="onclickColor('#FFFFFF')">
                    ÌïòÏñÄÏÉâ Í∏ÄÏî®
                </div>
            </div>
            <div class="item-button">
                <div class="colorButtonBlack" @click="onclickColor('#1C1C1E')">
                    Í≤ÄÏ†ïÏÉâ Í∏ÄÏî®
                </div>
            </div>
        </div>

        <div class="divied"></div>

        <div id="credit">
            ÎßåÎì†Ïù¥ : <a href="https://twitter.com/FlatcherLynd" class="credit" target="_blank">ÏúåÎ¶¨ üëÄ</a>, <a href="https://twitter.com/Hyunjinraykkom" class="credit" target="_blank">Î™®Î¶¨ üê≠</a>
        </div>

        <ins class="kakao_ad_area" style="display:none;" 
            data-ad-unit    = "DAN-sprUUbzsH1FNCx00" 
            data-ad-width   = "320" 
            data-ad-height  = "50"></ins> 
            
        <div class="divied-bottom"></div>
        <!-- <div id='inputText'>
            <p>Í≥µÏú†ÌïòÍ≥† Ïã∂ÏùÄ Î¨∏ÏûêÏó¥</p>
            <textarea id="shareText" v-model="shareText"></textarea>
        </div>

        <button @change="generateImage">Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±ÌïòÍ∏∞</button> -->

        <!-- <nav class="mobile-bottom-nav">
            <div class="mobile-bottom-nav__item" @click="shareImage">
                Ï†ÄÏû•ÌïòÍ∏∞
            </div>
        </nav> -->

        <!-- <div id='share'>
            <p @click="shareImage">Í≥µÏú†ÌïòÍ∏∞</p>
        </div> -->

        <div style="display: none;">
            <canvas id="canvas" ></canvas>
        </div>
    </div>
</body>
</html>


<script>
    let fontList = [
        {
            "name": "Î¶¨ÎîîÎ∞îÌÉï",
            "family": "RIDIBatang"
        }, 
        {
            "name": "Kopub Î∞îÌÉïÏ≤¥",
            "family": "KopubBatang"
        }, 
        {
            "name": "Î≥∏Í≥†Îîï",
            "family": "NotoSans"
        }
    ]

    let imageList = Array.from(Array(9).keys()).map((v) => `bg_0${v}`)
    
    let app = new Vue({
        el: '#app',
        data: {
            shareText: '',
            imageData: '',
            twitterLink: '',
            selectImage: imageList[0],
            selectFont: fontList[0]['family'],
            selectColor: '#FFFFFF',

            tweetText: '',
            tweetName: '',
            tweetUsername: '',

            canvas: null,

            errorMessage: '',
            loadingMessage: '',
            resultMessage: '',
            fontList,
            imageList,
            mounted: false,            
        },
        mounted: function () {
            this.mounted = true;
            fabric.Object.prototype.objectCaching = true;
        },
        methods: {
            render: function () {
                if (this.tweetText == '') {
                    this.errorMessage = 'Ìä∏Ïúó ÎßÅÌÅ¨Î•º ÎÑ£Ïñ¥Ï£ºÏÑ∏Ïöî'
                    return
                } 
                
                // 600 * 0.6 = 360
                console.log(window.screen.width)
                // const imageSize = Math.min(window.screen.width-32, 600);
                const imageSize = 360;
                const margin = 20 ;

                if (this.canvas == null) {
                    
                } else {
                    this.canvas.dispose()
                }
                
                this.canvas = new fabric.Canvas('canvas', {
                    isDrawingMode: false,
                    width: imageSize,
                    height: imageSize,
                    allowTouchScrolling: false,
                });
                
                var imgElement = document.getElementById(this.selectImage);
                var imgInstance = new fabric.Image(imgElement, {
                    left: 0,
                    top: 0,
                    right: 1200,
                    bottom: 1200,
                    scaleX: imageSize / 1200,
                    scaleY: imageSize / 1200,
                    opacity: 1,
                    selectable: false,
                });
                this.canvas.add(imgInstance);

                var text = new fabric.Textbox(this.tweetText, { 
                    left: margin,
                    width: imageSize - (margin * 2) - 8,
                    fontSize: 15, 
                    fontFamily: this.selectFont,
                    lineHeight: 1.5,
                    selectable: false,
                    fill: this.selectColor,
                    textAlign: 'left',
                    charSpacing: 100,
                    splitByGrapheme: true,
                });

                // console.log('height', text.height);
                text.top = (imageSize - (text.height + 54)) / 2
                this.canvas.add(text);

                var nameText = new fabric.Text(this.tweetName, { 
                    left: margin,
                    width: imageSize - (margin * 2),
                    fontSize: 14, 
                    fontFamily: 'NotoSans',
                    top: (text.top + text.height + 16),
                    selectable: false,
                    fill: this.selectColor,
                });
                this.canvas.add(nameText);

                if (this.tweetUsername) {
                    var usernameText = new fabric.Text(`@${this.tweetUsername}`, { 
                        left: margin,
                        width: imageSize - (margin * 2),
                        fontSize: 14, 
                        fontFamily: 'NotoSansThin',
                        top: (text.top + text.height + 38),
                        selectable: false,
                        fill: `${this.selectColor}B0`,
                    });
                    // console.log('usernameText.height', usernameText.height)
                    this.canvas.add(usernameText);
                }

                fabric.Image.fromURL('./image/logo.png', (logo) => {
                    logo.scaleX = 0.3
                    logo.scaleY = 0.3
                    logo.left = imageSize - (logo.width * logo.scaleX) - 10
                    logo.top = imageSize - (logo.height * logo.scaleY) - 10
                    this.canvas.add(logo);

                    this.imageData = this.canvas.toDataURL({
                        format: 'png',
                        multiplier: 4,
                    })
                    console.log('finished render')
                })

                // this.canvas.renderAll();

            },
            generateImageFromPaste: async (event) => {
                // console.log('generateImageFromPaste', event)
                let vueData = app.$data
                vueData.twitterLink = event.target.value
                await app.generateImage();
            },
            generateImage: async () => {
                let vueData = app.$data
                // console.log('generateImage',  vueData.twitterLink)

                vueData.loadingMessage = 'Ïù¥ÎØ∏ÏßÄÍ∞Ä ÎßåÎì§Ïñ¥ÏßÄÎäî Ï§ëÏù¥ÏóêÏöî'
                vueData.errorMessage = ''
                vueData.resultMessage = ''

                try {
                    const url = new URL(vueData.twitterLink)
                    const paths = url.pathname.split('/')

                    const twitterId = paths[paths.length-1]

                    const response = await fetch('/api/get/tweet', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json;charset=utf-8'
                        },
                        body: JSON.stringify({
                            tweet: twitterId,
                        })
                    });
                
                    const data = await response.json()

                    vueData.tweetText = data.text
                    vueData.tweetName = data.name
                    vueData.tweetUsername = data.username

                    app.render();

                    vueData.errorMessage = ''
                    vueData.loadingMessage = ''
                    vueData.resultMessage = 'ÏïÑÎûò Ïù¥ÎØ∏ÏßÄÎ•º Íæ∏Ïö± ÎàåÎü¨ <strong>Ï†ÄÏû•</strong>Ìï¥ Ï£ºÏÑ∏Ïöî'
                    
                } catch (error) {
                    // console.log('generateImage error', error)

                    vueData.errorMessage = 'Ìä∏Ïúó ÎßÅÌÅ¨Í∞Ä Î∞îÎ•¥ÏßÄ ÏïäÍ±∞ÎÇò ÎπÑÍ≥µÍ∞ú Í≥ÑÏ†ï Ìä∏ÏúóÏûÖÎãàÎã§.'
                    vueData.loadingMessage = ''
                    vueData.resultMessage = ''
                }
            },
            checkSelected: function (image) {
                return image == this.selectImage ? 'selected' : 'no-selected'
            },
            checkSelectedFont: function (font) {
                return font == this.selectFont ? 'selected-font' : ''
            },
            onclickImage: async(image) => {
                let vueData = app.$data
                console.log('onclickImage', image)    

                vueData.selectImage = image
                // await app.generateImage()
                app.render()
            },
            onclickFont: async function (family) {
                this.selectFont = family;
                // await this.generateImage()
                this.render()
            },
            onclickColor: async function (color) {
                this.selectColor = color;
                // await this.generateImage()
                this.render()
            },
            shareImage: async () => {
                let vueData = app.$data
                console.log('shareImage')

                if(navigator.userAgent.match('CriOS')) {
                    alert("iOS Chrome Í≤ΩÏö∞ Ïù¥ÎØ∏ÏßÄÎ•º Í∏∏Í≤å ÌÅ¥Î¶≠Ìï¥ÏÑú ÌïòÎã® 'Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû•'ÏùÑ ÌÅ¥Î¶≠Ìï¥Ï£ºÏÑ∏Ïöî.")
                    return;
                } else {
                    // safari
                }

                // window.location.href=vueData.imageData.replace("image/png", "image/octet-stream");

                let link = document.createElement("a")
                // var link = document.getElementById('link');
                link.setAttribute('download', 'widi-share.png');
                link.setAttribute('href', vueData.imageData.replace("image/png", "image/octet-stream"));
                document.body.appendChild(link);
                link.click();
                
                // const base64url = vueData.imageData.replace("image/png", "image/octet-stream")
                // const blob = await (await fetch(base64url)).blob();
                // const file = new File([blob], 'fileName.png', { type: blob.type });
                
                // const data = {
                //     files: [file],
                //     title: 'Widi Share',
                // }

                // if (navigator.canShare && navigator.canShare(data)) {
                //     await navigator.share(data)
                //     alert('Í≥µÏú† ÏÑ±Í≥µ')
                // } else {
                //     alert('Í≥µÏú† Ïã§Ìå®')
                // }

            }
        }
    })
</script>
<script type="text/javascript" src="//t1.daumcdn.net/kas/static/ba.min.js" async></script>